acad.lsp

	command
acaddoc.lsp

	vl-load-com
	load
	print
	setq
	getvar
	testforextralayers
	command
	if
	not
	null
	tblsearch
	setvar
	open
	progn
	write-line
	ssget
	list
	cons
	close
	c:begin
		catch22.lsp
	vl-string-search
	c:fax
		access.lsp
	c:exportnewids
		newroomid.lsp
	c:stop
	atoi
	read-line
	initget
	getint
	itoa
	entget
	c:ename
		acaddoc.lsp
	ssname
	insertextralabels
		Original Site Plan Lisp\\siteplan-utils.lsp
	C:LABELLAYER
		monumentids.lsp
access.LSP

	load
	setq
	setvar
	if
	member
	layoutlist
	vl-bb-set
	command
	ssget
	list
	cons
	progn
	sssetfirst
	c:burst
	c:AttDef2Text
	cdr
	assoc
	entget
	ssname
	0
	strcat
	c:rsnap
		acaddoc.lsp
	vl-cmdf
	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	getvar
	LM:ssboundingbox
	
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	car
	cadr
	explode
		access.lsp
	c:fc
		sitealign.lsp
	convexhull
		hull.lsp
	foreach
	dist
	>
	entmakex
	append
	000
	100
	length
	070
	mapcar
	lambda
	ssadd
	/
	getcenter
		util.lsp
	testoverlap
	repeat
	getvcenter
	+
	while
	*
	cond
	max
	-
	LM:ss->ent
	LM:getattributevalue
		util.lsp 		util.lsp
	LM:endundo
	entdel
	c:fax
	vl-filename-base
	c:prepmerge
		prepmerge.lsp
	vl-bb-ref
	getaspectratio
	abs
	and
	expt
	getaccessbounds
		access.lsp		access.lsp
	min
	nth
	vla-get-area
	vlax-ename->vla-object
	vector
	attributes
	vla-get-ActiveDocument
	vlax-get-Acad-Object
	vla-StartUndoMark
	vla-get-Layouts
	vlax-for
	vla-get-Block
	=
	vla-get-ObjectName
	vla-AddText
	vla-get-TagString
	vla-get-InsertionPoint
	vla-get-Height
	vla-put-Alignment
	vla-get-Alignment
	/=
	vla-put-TextAlignmentPoint
	vla-get-TextAlignmentPoint
	vla-put-Backward
	vla-get-Backward
	vla-put-Layer
	vla-get-Layer
	vla-put-Normal
	vla-get-Normal
	vla-put-ObliqueAngle
	vla-get-ObliqueAngle
	vla-put-Rotation
	vla-get-Rotation
	vla-put-ScaleFactor
	vla-get-ScaleFactor
	vla-put-StyleName
	vla-get-StyleName
	vla-put-UpsideDown
	vla-get-UpsideDown
	vla-Delete
	vla-EndUndoMark
	princ
	vlax-safearray->list
	variant-value
	vlax-invoke-method
	vla-delete
	c:faxess
batchexr.lsp

	if
	tblsearch
	command
	removepface
		newroomid.lsp
	setq
	nri:getblockSS
	getvar
	setvar
	=
	c:fixroom
		util.lsp
	not
	null
	beginexport
	progn
	LM:ss->ent
	ssget
	list
	cons
	pc
	foreach
	ade_odgetfield
	addoldRoomID
	setoldRoomID
	LM:ssboundingbox
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	setLayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	car
	cadr
	caddr
	makePL
	nri:sortclockwise
	ename,
	substr
	vl-filename-base
	vl-string-search
	cond
	
	+
	-
	T
	ACET-UI-MESSAGE
	addSiteID
	0
	while
	<
	length
	nth
	setSiteID
	getlabel
		exportrooms.lsp
	strcat
	itoa
	addnewRoomID
	setnewRoomID
	<=
	append
	replace
	write_export
	close
	sslength
	nri:getblockss
	alert
	print
	entdel
BATCHLISP.lsp

	
	setq
	if
	progn
	selectfiles
	getvar
		selectfiles.lsp
	getfiled
	repeat
	vl-string-subst
	open
	setvar
	princ
	strcat
	chr
	foreach
	command
	prin1
	load
	vl-filename-base
	itoa
	close
	alert
batchref.LSP

	if
	not
	null	
	LM:getfiles
		util.lsp
	progn
	null
	vl-position
	ade_odtablelist
	ade_oddefinetab
	list
	cons
	"tabledesc"
	
	"coldesc"
	"coltype"
	"defaultval"
	setq
	getvar
	foreach
	vl-filename-base
	wcmatch
	vl-string-search
	cond
	strcat
	substr
	+
	-
	T
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	command
batchrun.LSP

	c:chgunits
		chgunits.lsp
catch22.lsp

	setq
	open
	if
	not
	null
	tblsearch
	write-line
	getvar
	close
	c:chgunits
		chgunits.lsp
	c:stop
		catch22.lsp
	command
chgunits.lsp

	setvar
cmd.LSP
	command

	while
	not
	findfile
	setq
	open
	print
	read-line
	close
	vl-file-delete
	vlax-create-object
	vlax-invoke-method
Ellipse2ArcV1-1.lsp
	that

	if
	setq
	ssget
	
	-4
	40
	repeat
	sslength
	entget
	ssname
	1-
	cdr
	assoc
	trans
	distance
	0.0
	*
	angle
	list
	cos
	-
	sin
	mapcar
	mxv
		Ellipse2ArcV1-1.lsp 		hull.lsp
	equal
	entmake
	cons
	0
	append
	LM:defaultprops
		Ellipse2ArcV1-1.lsp
	entdel
	princ
	function
	lambda
	cond
	car
	008
	006
	039
	062
	048
	370
	apply
entrance_ids.lsp

	label_entrance
		entrance_ids.lsp
	if
	member
	layoutlist
	setvar
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	c:newfields
		ids.lsp
	command
	setq
	ssget
	0
	11
	list
	cons
	getvar
	and
	progn
	<
	sslength
	flag
	foreach
	LM:ss->ent
	find_entrance_tri
	nth
	ssdel
	sssetfirst
	ssadd
	c:burst
	addSiteID
	setSiteID
	strcat
	ade_odgetfield
	get_number
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp		entrance_ids.lsp
	not
	null
	=
	cdr
	assoc
	entget
	vla-copy
	vlax-ename->vla-object
	MSS
		util.lsp
	see
	makepl
	10
		newroomid.lsp
	or
	entdel
	acet-autoload2
	"FLATTENSUP.LSP"
	acet-flatn
	move_to_tri_center
	find_pl
	min_dist_btwn_objects_pl
	min_dist_btwn_objects
	within
	LM:ssboundingbox
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	v+
	0.005
		entrance_ids.lsp		entrance_ids.lsp
	as
	vlax-curve-getendpoint
	vlax-curve-getstartpoint
	v-
	0.05
	ssmemb
	mergess
	convexhull
		hull.lsp
	while
	length
	1-
	1+
	dist_line_to_line
	redraw
	grvecs
	min
	disttosegment
	dot
	>
	v*
	/
	sqrt
	append
	-
	+
	*
	vl
	LM:getattributevalue
		util.lsp 		util.lsp		util.lsp 		util.lsp
	cond
	
	strlen
	wcmatch
	vla-getBoundingBox
	vlax-safearray->list
	cadr
	car
	dist
	open
	write-line
	close
	vla-move
	vlax-3d-point
	center_tri
	avgcentroid
Exportalllabels.LSP

	setq
	LM:ss->ent
	open
	strcat
	foreach
	write_export
	LM:getattributevalue
		util.lsp 		util.lsp		util.lsp 		util.lsp		util.lsp 		util.lsp
	close
exportrooms (old).lsp
	ignore)This

	vl-load-com
	load
	setq
	ssget
	list
	cons
	ssadd
	repeat
	sslength
	ssname
	+
	beginexport
	foreach
	LM:ss->ent
	LM:ent->pts
		util.lsp
	length
	getorigin
		exportrooms.lsp
	nth
	testpt
	if
	=
	rem
	progn
	ssdel
	cond
	
	ade_odgetfield
	null
	LM:getattributevalue
		util.lsp 		util.lsp
	T
	write_export
	close
	print
	-
	/=
	/
	*
	intersect
	and
	>
	or
	<
	cdr
	assoc
	entget
	getpropertyvalue
	cos
	sin
	point
	LM:browseforfolder
	not
	open
	strcat
	write-line
	itoa
exportrooms.lsp

	New
	placeholder
	setq
	LM:ent->pts
		util.lsp
	length
	foreach
	LM:ss->ent
	nri:getblockss
		newroomid.lsp
	getorigin
		exportrooms.lsp
	nth
	testpt
	if
	=
	rem
	progn
	+
	cons
	cond
	
	ssmemb
	ssdel
	ade_odgetfield
	null
	LM:getattributevalue
		util.lsp 		util.lsp
	T
	princ
	list
	repeat
	-
	/=
	/
	*
	intersect
	and
	>
	or
	<
	>=
	x
	cdr
	assoc
	entget
	getpropertyvalue
	cos
	sin
	ssget
	buildSelFilter
		monumentids.lsp
	vl-catch-all-apply
	vlax-ename->vla-object
	vl-catch-all-error-p
	vl-catch-all-error-message
	vlax-safearray->list
	car
	cadr
	vlax-curve-getStartPoint
	vlax-curve-getEndPoint
	not
	cadar
	caddar
	nri:highlight
	caar
	point
	H:\\Map
	LM:browseforfolder
	open
	strcat
	bad
	write-line
findvertex.lsp
	setq

	if
	null
	search
		findvertex.lsp
	next
	foreach
	LM:ss->ent
	ssget
	list
	cons
	LM:ent-pts
	and
	not
	<=
	dist
	progn
	append
	nth
	sssetfirst
	ssadd
fixrockford.LSP
	facility

	setq
	getpoint
	LM:ss->ent
	ssget
	list
	cons
	beginexport
	foreach
	setoldroomid
	ade_odgetfield
		util.lsp
	write_export
	itoa
	close
hull.lsp
	load

	setq
	list
	foreach
	LM:ss->ent
	if
	and
	=
	cdr
	assoc
	entget
	tblobjname
	while
	not
	entnext
	print
	append
	getpoints
		hull.lsp
	LM:ConvexHull
		hull.lsp 		Original Site Plan Lisp\\ConvexHull.lsp
	cond
	
	getmeshcoords
		newroomid.lsp
	<
	-
	length
	nth
	+
	null
	mapcar
	lambda
	pt
	apply
	mxv
	refgeom
		Ellipse2ArcV1-1.lsp 		hull.lsp		hull.lsp
	car
	or
	cadr
	equal
	vl-sort
	function
	angle
	distance
	caddr
	cdddr
	cons
	LM:Clockwise-p
	cddr
	*
	xref,
	mxm
	trans
	1.0
	0.0
	cos
	sin
	tblsearch
		Ellipse2ArcV1-1.lsp 		hull.lsp
	trp
	convexhull
	ss
	entmakex
	000
	100
	070
ids.LSP

	id_feature
	c:fac_id
		ids.lsp
	setq
	foreach
	LM:ss->ent
	addSiteID
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	if
	or
	=
	ade_odgetfield
	null
	setSiteID
	substr
	getvar
	+
	command
	addODTable
	ade_odsetfield
	e.g.
	not
	ssget
	buildSelfilter
	list
		monumentids.lsp
	progn
	pc
		util.lsp
	sortclockwise
	ename,
	cond
	
	strcat
	itoa
	chr
	car
	print
	opc
		util.lsp		monumentids.lsp
	prompt
	T),
	nil).
	strlen
	rem
	testpt
	nth
	get_obj_point
	LM:ent->pts
	append
	ssadd
	cons
	and
	member
	id_set_by_line
		ids_2.lsp
	usually
	"FRST"
	mapcar
	ACET-UI-MESSAGE
	highlight
	redraw
	vla-ZoomExtents
	vlax-get-acad-object
	id_layer
	replaced
	"PLAY"
	getcenter
	cdr
	with
	chgdspl)),
	"PARK"
	chgdspl
	assoc
	entget
	wcmatch
	sortclockwisePt
	/=
	PSS
	repeat
	sslength
	LM:getattributevalue
	ssname
		util.lsp 		util.lsp
	ssdel
	getorigin
		exportrooms.lsp
	cadr
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp		util.lsp 		util.lsp
	MSS
	sortbydist
	sort_path
ids_2.LSP

	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	command
	while
	not
	progn
	initget
	setq
	entsel
	strcat
	princ
	if
	null
	=
	getvar
	entlast
	type
	nth
	ssget
	list
	cons
	ssmemb
	ssdel
	LM:ss->ent
	foreach
	<
	-
	length
	LM:ent->pts
		util.lsp
	1+
	get_obj_point
	point_on_segment
	vl
	v-
		entrance_ids.lsp		entrance_ids.lsp
	append
	cdr
	assoc
	entget
	vl-sort
	cond
	
	itoa
	chr
	+
	addSiteID
	car
	setSiteID
	substr
	print
	entdel
	highlight
	ade_odgetfield
	strlen
	getkword
	rem
	testpt
	and
	member
	chgdspl
	buildSelfilter
		monumentids.lsp		monumentids.lsp
		monumentids.lsp
	1
	vl-position
	replace
	pc
	sortclockwise
	ename,
	opc
		util.lsp		monumentids.lsp
	prompt
	get_closest
	zmobj
		ids_2.lsp
	redraw
	highlight_nozoom
		entrance_ids.lsp
	getint
	vl-load-com
	mapcar
	vl-remove-if
	ssnamex
	vla-getBoundingBox
	vla-ZoomWindow
	vlax-get-acad-object
	vlax-3D-point
	maxminpnt
	cadr
	dist
	x
	getcenter
	ssadd
		util.lsp		util.lsp
	avgCentroid
	v*
	v+
	c:fc
		sitealign.lsp
	*error*
	/
	dot
		entrance_ids.lsp		entrance_ids.lsp		entrance_ids.lsp
	or
	>
		entrance_ids.lsp		entrance_ids.lsp		entrance_ids.lsp		entrance_ids.lsp		entrance_ids.lsp		entrance_ids.lsp
	abs
		entrance_ids.lsp		entrance_ids.lsp		entrance_ids.lsp		entrance_ids.lsp
	average
	v++
	lambda
	o
	getvcenter
		entrance_ids.lsp		entrance_ids.lsp		access.lsp
		access.lsp
	a
label2.lsp

	load
	helper2
		label2.lsp
	setq
	load_dialog
	strcat
	getvar
	setvar
	while
	>
	if
	not
	new_dialog
	exit
	action_tile
	done_dialog
	done_dialog)"
	start_dialog
	cond
	
	=
	createSections2
	labelLayers2
	fixlabel2
	unload_dialog
	print
	command
	list
	getSelection
		label2.lsp 		Original Site Plan Lisp\\colorLines.lsp
	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	and
	null
	sslength
	getlayer
		Original Site Plan Lisp\\colorLines.lsp
	<
	entget
	ssname
	setcolor
	nth
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	+
	LM:ss->ent
	append
	LM:endundo
	set
	setlayer
	isIso
	delbylayer
		Original Site Plan Lisp\\Downloaded\\del-layer.lsp
	length
	ssadd));init
	-
	itoa
	t
	chr
	initget
	entsel
	ssadd
	car
	addSiteID
	setSiteID
	getschoolnum)"_"
	PSC
	placeText
		label2.lsp 		Original Site Plan Lisp\\helper.lsp
	<=
	ssget
	cons
	getschoolnum
	A1)")));create
		Original Site Plan Lisp\\colorLines.lsp		Original Site Plan Lisp\\colorLines.lsp
	could
	*isx*
	A1)"
	foreach
	eq
	open
	write-line
	substr
	close
	i.e.
	set_tile
	saveid
	redolabel
	get_tile
	alert
	strcase
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp		Original Site Plan Lisp\\colorLines.lsp
	cdr
	assoc
	vlax-ename->vla-object
	safearray-value
	variant-value
	vla-get-Coordinates
	/
	vla-intersectwith
	vlax-curve-isClosed
	equal
	vlax-curve-getStartPoint
	vlax-curve-getEndPoint
	1+
	ade_odgetfield
	ade_odsetfield
	progn
	mapcar
	vl-remove-if
	ssnamex
	vla-get-ModelSpace
	vla-get-ActiveDocument
	vlax-get-acad-object
	vla-get-Closed
	vla-copy
	vlax-make-safearray
	0
	vlax-safearray-put-element
	vlax-variant-value
	vla-AddRegion
	vlax-3d-point
	vlax-safearray->list
	vla-get-Centroid
	vla-addText
	vla-delete
merge.lsp
	0-floor#

	if
	not
	null
	setq
	LM:getfiles
		util.lsp
	progn
	foreach
	command
	strcat
	first
	LM:ss->ent
	ssget
	
	substr
	vl-filename-base
	entget
	wcmatch
	cdr
	assoc
	list
	0
	e.g.
	null	
	getvar
	vl-string-search
	cond
	+
	-
	T
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	setvar
	"B"
	"1"
	"2"
	"3"
	"4"
	"5"
	"6"
	"M"
	"BM"
	"GM"
	"1M"
	"2M"
	"3M"
	"Fb"
	"G"
	"P"
	"PH"
	member
	car
	close
	open
monumentids.LSP
	load

	setq
	getvar
	setvar
	foreach
	LM:ss->ent
	ssget
	setSiteID
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	if
	not
	tblsearch
	progn
	c:newfields
		ids.lsp
	site_mon_nums
		monumentids.lsp
	prompt
	command
	c:smn
	print
	list	
	list
	"tdsb-smsc-parking")				
	substr
	getpoint
	list_layers
	princ
	strcat
	nth
	or
	null
	cons
	cond
	
	id_layer
	id_layer_child
	id_by_line
		ids_2.lsp
	id_by_line_child_parking
	id_by_hand
	id_soccer_posts
	=
	initget
	getkword
	label_entrance
		entrance_ids.lsp
	T
	load_dialog
	while
	and
	>
	new_dialog
	exit
	start_list
	vl-sort
	Table
		Original Site Plan Lisp\\colorLines.lsp
	mapcar
	end_list
	set_tile
	itoa
	vl-position
	action_tile
	saveLayer
		monumentids.lsp 		Original Site Plan Lisp\\helper.lsp
	start_dialog
	progn	
	get_tile
	alert
	atoi
	for
	get_obj_point
	car
	cadr
	gensortclockwise
	cdr
	reverse
	assoc
	entget
	dotted
	x
	LM:ent->pts
		util.lsp
	isCounterClockwise
	append
	object,
	repeat
	length
	find_closest
	+
	-
	*
	dist
	<
	buildSelfilter
	described
	/=
	grdraw
	disttoline
	LM:getinsideangle
	/
		monumentids.lsp 		newroomid.lsp		util.lsp		util.lsp
		monumentids.lsp 		newroomid.lsp
	min
	abs
	sqrt
	caddr
	caadr
	cdadr
	vla-getBoundingBox
	vlax-ename->vla-object
	vlax-safearray->list
	vla-ZoomWindow
	vlax-get-acad-object
	vlax-3d-point
	grvecs
	e.g.
	sslength
	vlax-curve-getarea
	ssname
	ssdel
	getcenter
	ssadd
	highlight
	setcolor
	0
	make_layer
	change_layer
	*error*
newroomid.lsp

	they
	if
	tblsearch
	command
	removepface
		newroomid.lsp
	setq
	nri:getblockSS
	getvar
	setvar
	not
	null
	beginexport
	progn
	getpoint
	print
	list
	car
	cadr
	LM:ss->ent
	ssget
	cons
	pc
		util.lsp
	foreach
	ade_odgetfield
	setoldRoomID
	write-line
	nri:sortclockwise
	ename,
	vla-get-ModelSpace
	vla-get-ActiveDocument
	vlax-get-acad-object
	repeat
	length
	caadr
	nth
	-
	cdadr
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	vla-addText
	vlax-3d-point
	+
	getstring
	initget
	while
	and
	/=
	1/1M/2/2M/3/3M/4/5/6/B/BM/Fb/G/GM/M/P/PH)"
	=
	addSiteID
	addoldRoomID
	0
	<
	setSiteID
	getlabel
		exportrooms.lsp
	nri:highlight
	getkword
	cond
	
	replace
	entsel
	LM:getattributevalue
		util.lsp		util.lsp 		util.lsp
	>
	strcat
	itoa
	addnewRoomID
	setnewRoomID
	<=
	append
	redraw
	write_export
	close
	prompt
	room,
	LM:ent->pts
	nri:isCounterClockwise
	reverse
	getcenter
	ssadd
	cdr
	nri:find_closest
	vl-sort
	or
	assoc
	entget
	vl-position
		util.lsp		util.lsp
	LM:sublst
	alist
	x2
	x3
	*
	dist
	x
	grdraw
	disttoline
	LM:getinsideangle
	/
		monumentids.lsp 		newroomid.lsp		util.lsp		util.lsp
		monumentids.lsp 		newroomid.lsp
	min
	abs
	sqrt
	caddr
	buildSelFilter
		monumentids.lsp
	vla-getBoundingBox
	vlax-ename->vla-object
	vlax-safearray->list
	grvecs
	sslength
	alert
	testforpface
	plpface
	entdel
	vl-exit-with-error
	x0
	vla-get-coordinates
	SRC)</a>
	side
	getmeshcoords
	sortcoords
	makePL
	entmakex
	mapcar
	function
	lambda
	p
prepmerge.lsp
	load

	c:prepmerge
		prepmerge.lsp
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	command
	if
	not
	null
	tblsearch
	progn
	c:fc
		sitealign.lsp
	c:e2a
		Ellipse2ArcV1-1.lsp
	setq
	LM:ss->ent
	ssget
	list
	cons
	foreach
	testforpface
	write-line
	getvar
	open
	close
	removepface_noalert
	testforextralayers
	SUB.)"
	ADD.)"
	Setq
	Table
		Original Site Plan Lisp\\colorLines.lsp
	member
	strcase
	princ
	strcat
	plpface
		newroomid.lsp
	entdel
	addoldRoomID
		util.lsp
	setoldRoomID
	ade_odgetfield
	cdr
	assoc
	entget
search.LSP

	checked
	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	setq
	LM:ss->ent
	ssget
	getpoint
	list
	cons
	LM:browseforfolder
		util.lsp
	if
	not
	null
	progn
	open
	strcat
	while
	read-line
	foreach
	ade_odgetfield
	vl-string-search
	setcolor
	entget
	255
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	LM:endundo
	ssadd
	or
	LM:getattributevalue
		util.lsp 		util.lsp
	buildSelfilter
		monumentids.lsp
	mapcar
	print
	testpt).
	prompt
	ssname
	SsgeT
	cdr
	assoc
	princ
	=
	rem
	testpt
	nth
	LM:ent->pts
	ssget)0
	wcmatch
	+
	setSiteID
	should
	c:smn
	fixforestid
		search.lsp
	vl-string-subst
	misaligned
	cond
	
	substr
	-
	T
	write-line
	close
	getvar
selectfiles.lsp

	selectfiles
		selectfiles.lsp
	start_list
	end_list
	set_tile
	setq
	VL-Directory-Files
	VL-Sort
	function
	lambda
	a
	<
	strcase
	mapcar
	length
	if
	-
	strcat
	itoa
	get_tile
	nth
	atoi
	UpdateDialog
	cond
	
	=
	>
	strlen
	substr
	progn
	while
	/=
	T	
	list
	read
	append
	and
	+
	foreach
	princ
	getvar
	findDrives
	terpri
	member
	load_dialog
	not
	new_dialog
	exit
	action_tile
	UpDateDrives)"
	UpDateDirectory)"
	done_dialog)"
	saveVars
	start_dialog
sitealign.LSP

	c:chgunits
		chgunits.lsp
	command
	C2P:nogui
	LM:ss->ent
	ssget
	list
	cons
		util.lsp
	if
	null
	vl-position
	getxref
		sitealign.lsp
	vl-load-com
	setq
	vla-get-activedocument
	vlax-get-Acad-Object
	vla-get-blocks
	
	vlax-for
	vlax-get-property
	=
	progn
	append
	c:fixcircles
testpoint.lsp

	load
	setq
	getpoint
	nth
	car
	entsel
	LM:ent->pts
		util.lsp
	length
	repeat
	-
	if
	/=
	progn
	/
	*
	intersect
	+
testssorder.lsp
	load

	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	setq
	ssadd
	ssget
	list
	cons
	repeat
	sslength
	ssname
	+
	setcolor
	entget
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	LM:endundo
util.LSP

	Common
	command
	cond
	
	T
	new_isolate
		util.lsp
	string
	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	setq
	getvar
	*isIso*
	LM:endundo
	e.g.
	"site_id"
	if
	not
	ade_odtabledefn
	progn
	ade_oddefinetab
	list
	cons
	"tabledesc"
	"coldesc"
	"coltype"
	"defaultval"
	member
	ade_odgettables
	ade_odaddrecord
	addintODTable
	addODTable
	ade_odsetfield
	x,
	point).
	x
	point
	car
	cdr
	starting
	mapcar
	lambda
	=
	1+
	null
	repeat
	sslength
	ssadd
	ssname
	+
	finderr
	findROOMerr
	LM:ss->ent
	ssget
	pc
	foreach
	equal
	getcenter
	-1.0
	setcolor
	entget
	120
	i.e.
	-1
	vla-AddRegion
	specifically
	buildSelfilter
		monumentids.lsp
	/=
	assoc
	ssdel
	getpoint
	print
	cadr
	close
	setvar
	princ
	strcat
	R
	vlax-ename->vla-object
	vlax-get-property
	nth
	vla-setRGB
	vla-put-TrueColor
	vla-update
	vla-put-ColorIndex
	GC
	SETVAR
	COMMAND
	<a
	atan
	sqrt
	-
	*
	vl-remove-if
	ssnamex
	vla-get-ModelSpace
	vla-get-ActiveDocument
	vlax-get-acad-object
	vla-get-Closed
	vla-copy
	vlax-make-safearray
	0
	vlax-safearray-put-element
	vl-catch-all-error-p
	vl-catch-all-apply
	vlax-variant-value
	vlax-3d-point
	append
	vlax-safearray->list
	vla-get-Centroid
	vla-delete
	LM:ent->pts
	/
	length
	vl-remove-if-not
	67
	100
	90
	70
	43
	caddr
	40
	41
	42
	210
	entmake)]
	entdel
	entmake
	Pickset
	1-
	use
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	vla-startundomark
	while
	logand
	vla-endundomark
	eval
	vla-get-activedocument
	strcase
	vl-some
	vla-get-tagstring
	vla-get-textstring
	vlax-invoke
	vla-put-textstring
	Insert
	and
	entnext
	reverse
	LM:getattributevalue
		util.lsp 		util.lsp
	if	
	subst
	entupd
	LM:setattributevalue
	entmod
	LM:getattributevalues
	LM:setattributevalues
	POINT/LINE/ARC/CIRCLE/LWPOLYLINE/POLYLINE/ELLIPSE/SPLINE
	vlax-curve-getdistatparam
	vlax-curve-getendparam
	/	di2
	fix
	<
	vlax-curve-getpointatdist
	vlax-curve-isclosed
	vlax-curve-getendpoint
	wcmatch
	zerop
	vlax-curve-getsecondderiv
	0.0
	vlax-curve-getpointatparam
	distance
	vlax-curve-getfirstderiv
	setq	lst
	or
	last
	vlax-curve-getstartparam
	vlax-curve-getparamatdist
	max
	function
	vla-getinterfaceobject
	vlax-invoke-method
	vl-string-right-trim
	vl-string-translate
	vlax-release-object
	prompt
	vl-catch-all-error-message
	min
	rem
	angle
	vla-put-closed
	LM:sublst
	type
	unload_dialog
	findfile
	vl-file-delete
	vl-filename-mktemp
	open
	write-line
	load_dialog
	new_dialog
	LM:getfiles:str->lst
	"*"
	set_tile
	nil
	LM:getfiles:fixdir
	vl-file-directory-p
	LM:getfiles:updatefilelist
	mode_tile
	action_tile
	vl-prin1-to-string
	LM:getfiles:browseforfolder
	LM:getfiles:updateselected
	read
	"
	".."
	LM:getfiles:updir
	LM:getfiles:checkredirect
	LM:getfiles:sort
	vl-every
	vl-remove
	get_tile
	LM:getfiles:removeitems
		util.lsp		util.lsp
	start_dialog
	*error*
	start_list
	add_list
	end_list
	itoa
	cdar
	LM:getfiles:sortlist
	vl-directory-files
	vl-filename-extension
	substr
	getenv
	vl-string-position
	"my
	apply
	vl-sort
	LM:getfiles:groupbyfunction
	vl-sort-i
	numberp
	fun
	vl-list->string
	45
	vl-string->list
	LM:getfiles:full->relative
	vl-string-search
	strlen
	LM:getfiles:listbox
	LM:getfiles:listfiles
	vlax-method-applicable-p
addlayers.lsp

	load
	setq
	getvar
	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	command
colorLines.LSP

	setq
	list
	getSelection
		label2.lsp 		Original Site Plan Lisp\\colorLines.lsp
	getlayer
		Original Site Plan Lisp\\colorLines.lsp
	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	getvar
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	LM:outline
		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	placeText
	LM:endundo
	ssget
	cons
	if
	eq
	ssadd
	while
	<
	sslength
	entget
	ssname
	print
	strcat
	cdr
	assoc
	cond
	
	+
	r
	vlax-ename->vla-object
	vlax-get-property
	nth
	vla-setRGB
	vla-put-TrueColor
	vla-update
	setcolor
	vla-put-ColorIndex
	command
	T
	tblnext
	null
	progn
	mapcar
	vl-remove-if
	ssnamex
	vla-get-ModelSpace
	vla-get-ActiveDocument
	vlax-get-acad-object
	foreach
	vla-get-Closed
	vla-copy
	vlax-make-safearray
	0
	vlax-safearray-put-element
	car
	vlax-variant-value
	vla-AddRegion
	vlax-3d-point
	append
	vlax-safearray->list
	vla-get-Centroid
	vla-addText
	vla-delete
	e.g.
	not
	ade_odtabledefn
	ade_oddefinetab
	"tabledesc"
	"coldesc"
	"coltype"
	"defaultval"
	member
	ade_odgettables
	ade_odaddrecord
	addODTable
	ade_odsetfield
	assuming
	substr
	Pickset
	repeat
	1-
ConvexHull.lsp

	cond
	
	<
	length
	setq
	car
	foreach
	cdr
	if
	or
	cadr
	and
	equal
	vl-sort
	function
	lambda
	angle
	distance
	list
	caddr
	cdddr
	cons
	while
	LM:Clockwise-p
		hull.lsp 		Original Site Plan Lisp\\ConvexHull.lsp
	cddr
	-
	*
helper.lsp

	load
	setq
	list
	load_dialog
	strcat
	getvar
	setvar
	while
	>
	if
	not
	new_dialog
	exit
	start_list
	mapcar
	Table
		Original Site Plan Lisp\\colorLines.lsp
	end_list
	set_tile
	itoa
	vl-position
	action_tile
	saveLayer
		monumentids.lsp 		Original Site Plan Lisp\\helper.lsp
	start_dialog
	cond
	
	=
	createSections
		Original Site Plan Lisp\\helper.lsp
	labelLayers
	export
	isolate
		label2.lsp 		Original Site Plan Lisp\\helper.lsp
	fixlabel
	unload_dialog
	print
	get_tile
	alert
	nth
	atoi
	getSelection
		label2.lsp 		Original Site Plan Lisp\\colorLines.lsp
	LM:startundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	and
	null
	sslength
	getlayer
	<
	entget
	ssname
	setcolor
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	+
	LM:ss->ent
	append
	LM:endundo
	set
	setlayer
	command
	isIso
	delbylayer
		Original Site Plan Lisp\\Downloaded\\del-layer.lsp
	length
	ssadd));init
	-
	t
	chr
	initget
	entsel
	ssadd
	car
	addSiteID
	setSiteID
	getschoolnum)"_"
	PSC
	placeText
	<=
	ssget
	cons
	getschoolnum
	A1)")));create
		Original Site Plan Lisp\\colorLines.lsp		Original Site Plan Lisp\\colorLines.lsp
	could
	*isx*
	A1)"
	foreach
	eq
	open
	write-line
	substr
	close
	saveoptions
	i.e.
	done_dialog
	saveid
	redolabel
	strcase
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp		Original Site Plan Lisp\\colorLines.lsp
	cdr
	assoc
	vlax-ename->vla-object
	safearray-value
	variant-value
	vla-get-Coordinates
	/
	vla-intersectwith
	vlax-curve-isClosed
	equal
	vlax-curve-getStartPoint
	vlax-curve-getEndPoint
	1+
	ade_odgetfield
	ade_odsetfield
inputtest.lsp

	setq
	while
	null
	initget
	entsel
	strcat
	currently
	=
movescale.LSP

	setq
	ssget
	list
	cons
	vla-get-CustomScale
	vlax-ename->vla-object
	ssname
	if
	>
	/
	while
	<
	sslength
	vlax-3d-point
	entget
	vl-catch-all-apply
	*
	-
	cadr
	caddr
	vla-move
	+
	setvar
	
	LM:getattributevalue
		util.lsp 		util.lsp
	LM:setattributevalue
mp.lsp

	setq
	getpoint
	list
	/
	car
	cadr
	command
newroomid(before prefix).lsp

	vl-load-com
	load
	setq
	getvar
	setvar
	if
	not
	null
	beginexport
	progn
	getpoint
	print
	list
	car
	cadr
	LM:ss->ent
	ssget
	cons
	pc
		util.lsp
	write-line
	sortclockwise
	ename,
		monumentids.lsp
	vla-get-ModelSpace
	vla-get-ActiveDocument
	vlax-get-acad-object
	repeat
	length
	caadr
	nth
	-
	cdadr
	setlayer
		util.lsp 		Original Site Plan Lisp\\colorLines.lsp
	vla-addText
	vlax-3d-point
	+
	getstring
	initget
	while
	and
	/=
	1/2/3/B)"
	=
	getblockSS
	foreach
	addSiteID
	ade_odgetfield
	addoldRoomID
	0
	<
	setSiteID
	getlabel
		exportrooms.lsp
	highlight
	getkword
	cond
	
	replace
	entsel
	LM:getattributevalue
		util.lsp		util.lsp 		util.lsp
	>
	strcat
	itoa
	addnewRoomID
	setnewRoomID
	<=
	append
	redraw
	write_export
	close
	prompt
	LM:ent->pts
	isCounterClockwise
	reverse
	getcenter
	ssadd
	cdr
	room,
	find_closest
	vl-sort
	vl-position
		util.lsp		util.lsp
	LM:sublst
	*
	dist
	or
	grdraw
	disttoline
	LM:getinsideangle
	/
		monumentids.lsp 		newroomid.lsp		util.lsp		util.lsp
		monumentids.lsp 		newroomid.lsp
	min
	abs
	sqrt
	caddr
	T
	vla-getBoundingBox
	vlax-ename->vla-object
	vlax-safearray->list
	grvecs
	princ
OutlineObjectsV1-1.lsp

	LM:endundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	if
	not
	wcmatch
	strcase
	princ
	strcat
	setq
	ssget
	progn
	LM:startundo
	LM:outline
		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	initget
	/=
	getkword
	repeat
	sslength
	entdel
	ssname
	1-
	LM:ssboundingbox
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	vlax-get-acad-object
	/
	apply
	mapcar
	lambda
	
	list
	-
	cons
	reverse
	*
	entmakex
	append
	000
	100
	090
	070
	caar
	caadr
	vl-list*
	getvar
	entlast
	ssadd
	while
	entnext
	setvar
	command
	trans
	car
	<
	and
	vlax-property-available-p
	vlax-ename->vla-object
	equal
	vla-get-area
	vla-zoomprevious
	vlax-method-applicable-p
	vl-catch-all-error-p
	vl-catch-all-apply
	vlax-safearray->list
	min
	vla-startundomark
	=
	logand
	vla-endundomark
	eval
	vla-get-activedocument
	vl-load-com
siteplan-utils.lsp

	load
	c:mpoint
	c:updatelayers
		Original Site Plan Lisp\\addlayers.lsp
	command
	11.5
tmp.lsp

	vl-load-com
	setq
	getreal
	ssget
	while
	sslength
	vlax-ename->vla-object
	ssname
	vlax-3d-point
	assoc
	entget
	*
	-
	cadr
	caddr
	cadddr
	vla-move
	+
CirclePolylineSwap.lsp

	two-equal-arc-segment
	vl-load-com
	if
	not
	wcmatch
	princ
	strcat
	prompt
	while
	and
	setq
	ssget
	
	=
	cdr
	assoc
	tblsearch
	entget
	ssname
	vl-remove-if-not
	lambda
	x
	member
	car
	67
	append
	100
	90
	70
	43
	list
	cons
	caddr
	-
	cadr
	40
	41
	42
	+
	210
	entmake)]
	entmake
	entdel
	setvar
	getvar
	progn;
	command
	/=
	initget
	/
	cond
	_P2Ccpos_
	T
	getkword
	substr
	distance;
	vlax-curve-getStartPoint
	vlax-curve-getPointAtParam
del-layer.lsp
	if
	progn
	vla-endundomark
	setq
	or
	=

	princ
	strcat
	vla-get-activedocument
	vlax-get-acad-object
	cond
	
	ssget
	list
	cons
	setvar
	vla-startundomark
	length
	mapcar
	vl-remove-if
	ssnamex
	vla-purgeall
	itoa
	T
	vl-catch-all-error-p
	vl-catch-all-apply
	vla-get-layers
multiple enclosing rectangle.lsp

	setq
	vla-get-activedocument
	vlax-get-acad-object
	if
	null
	progn
	vla-get-activeselectionset
	vlax-for
	vlax-invoke-method
	cons
	car
	vlax-safearray->list
	cadr
	apply
	list
	mapcar
	0.0
	0.5
	-0.5
OutlineObjectsV1-1.lsp

	LM:endundo
	LM:acdoc
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	if
	not
	wcmatch
	strcase
	princ
	strcat
	setq
	ssget
	progn
	LM:startundo
	LM:outline
		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	initget
	/=
	getkword
	repeat
	sslength
	entdel
	ssname
	1-
	LM:ssboundingbox
		util.lsp 		Original Site Plan Lisp\\OutlineObjectsV1-1.lsp 		Original Site Plan Lisp\\Downloaded\\OutlineObjectsV1-1.lsp
	vlax-get-acad-object
	/
	apply
	mapcar
	lambda
	
	list
	-
	cons
	reverse
	*
	entmakex
	append
	000
	100
	090
	070
	caar
	caadr
	vl-list*
	getvar
	entlast
	ssadd
	while
	entnext
	setvar
	command
	trans
	car
	<
	and
	vlax-property-available-p
	vlax-ename->vla-object
	equal
	vla-get-area
	vla-zoomprevious
	vlax-method-applicable-p
	vl-catch-all-error-p
	vl-catch-all-apply
	vlax-safearray->list
	min
	vla-startundomark
	=
	logand
	vla-endundomark
	eval
	vla-get-activedocument
	vl-load-com
Sel_by_OD__US.lsp

	princ
	while
	null
	setq
	ssget
	list
	cons
	if
	eq
	getvar
	entget
	ssname
	
	ade_odgettables
	cdar
	foreach
	reverse
	ade_odtabledefn
	cdr
	nth
	append
	ade_odrecordqty
	<
	+
	ade_odgetfield
	=
	fix
	cond
	vl-filename-mktemp
	open
	write-line
	close
	load_dialog
	1-
	length
	car
	not
	new_dialog
	exit
	start_list
	mapcar
	end_list
	set_tile
	itoa
	-
	member
	lambda
	x
	type
	rtos
	apply
	","
	T
	mode_tile
	action_tile
	atof
	get_tile
	\",\"
	vl-position
	done_dialog
	start_dialog
	unload_dialog
	vl-file-delete
	atoi
	read
	vl-list->string
	vl-string->list
	41
	assoc
	6
	62
	48
	ssadd
	js
	repeat
	sslength
	and
	wcmatch
	u
	eval
	strcat
	s)"
	sssetfirst
	prin1
testgui.lsp

	prompt
	setq
	load_dialog
	if
	not
	new_dialog
	exit
	action_tile
	done_dialog)"
	start_dialog
	unload_dialog
	princ
test_dcl1.lsp

	prompt
	setq
	load_dialog
	if
	not
	new_dialog
	exit
	action_tile
	done_dialog)"
	start_dialog
	unload_dialog
	princ
test_dcl2.lsp

	prompt
	setq
	load_dialog
	if
	not
	new_dialog
	exit
	set_tile
	mode_tile
	action_tile
	val1)"
	start_dialog
	unload_dialog
	alert
	strcat
	princ
	=
	get_tile
	progn
	val2
	<
	atoi
	done_dialog
WriteCSV-V1-1.lsp

	if
	setq
	open
	progn
	cond
	
	","
	foreach
	write-line
	LM:lst->csv
		Original Site Plan Lisp\\Downloaded\\WriteCSV-V1-1.lsp
	close
	cdr
	strcat
	LM:csv-addquotes
	car
		Original Site Plan Lisp\\Downloaded\\WriteCSV-V1-1.lsp		Original Site Plan Lisp\\Downloaded\\WriteCSV-V1-1.lsp
	wcmatch
	while
	vl-string-position
	vl-string-subst
	+
